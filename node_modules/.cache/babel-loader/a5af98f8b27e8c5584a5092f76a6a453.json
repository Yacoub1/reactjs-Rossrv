{"ast":null,"code":"var _jsxFileName = \"/home/robotuser10/Downloads/my-app/src/components/RobotState.jsx\";\nimport React, { Component } from 'react'; //import {Button} from \"react-bootstrap\"\n\nimport { Joystick } from 'react-joystick-component';\nimport Config from \"../scripts/config\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport * as Three from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      x: 0,\n      y: 0,\n      orientation: 0,\n      linear_velocity: 0,\n      angular_velocity: 0\n    };\n    this.init_connection();\n  } // create a pose subscriber\n\n\n  getRobotState() {\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/amcl_pose\",\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\"\n    }); // subscriber callback function\n\n    pose_subscriber.subscribe(message => {\n      this.setState({\n        x: message.pose.pose.position.x.toFixed(2)\n      });\n      this.setState({\n        y: message.pose.pose.position.y.toFixed(2)\n      });\n      this.setState({\n        orientation: this.getOrientationFromQuanternion(message.pose.pose.orientation).toFixed(2)\n      });\n    }); // create an odm (velocity) subscribe\n\n    var velocity_sub = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/odom\",\n      messageType: \"nav_msgs/Odometry\"\n    });\n    velocity_sub.subscribe(message => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2)\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2)\n      });\n    });\n  }\n\n  getOrientationFromQuanternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(ros_orientation_quaternion.x, ros_orientation_quaternion.y, ros_orientation_quaternion.z, ros_orientation_quaternion.w);\n    var rpy = new Three.Euler().setFromQuaternion(q);\n    return rpy[\"_z\"] * 180 / 3.14;\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection is established In the Tele component!\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed In the Tele component!\");\n      this.setState({\n        connected: false\n      }); // try to reconnecet every 3 sec\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.RSOBRIDGE_PORT + \"\");\n        } catch (error) {\n          console.log(\"Connection problem\");\n        }\n      }, Config.CONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.RSOBRIDGE_PORT + \"\");\n    } catch (error) {\n      console.log(\"Connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.getRobotState();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-4\",\n            children: \"Position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"x:\", this.state.x]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"y:\", this.state.y]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Orientation:\", this.state.orientation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-4\",\n            children: \"Velocities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Linear:\", this.state.linear_velocity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Angular:\", this.state.angular_velocity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default RobotState;","map":{"version":3,"sources":["/home/robotuser10/Downloads/my-app/src/components/RobotState.jsx"],"names":["React","Component","Joystick","Config","Row","Col","Container","Button","Three","RobotState","constructor","state","ros","x","y","orientation","linear_velocity","angular_velocity","init_connection","getRobotState","pose_subscriber","window","ROSLIB","Topic","name","messageType","subscribe","message","setState","pose","position","toFixed","getOrientationFromQuanternion","velocity_sub","twist","linear","angular","z","ros_orientation_quaternion","q","Quaternion","w","rpy","Euler","setFromQuaternion","Ros","console","log","on","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","RSOBRIDGE_PORT","error","CONNECTION_TIMER","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n//import {Button} from \"react-bootstrap\"\nimport { Joystick } from 'react-joystick-component';\nimport Config from \"../scripts/config\";\nimport {Row,Col, Container, Button} from \"react-bootstrap\";\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    x:0,\n    y:0,\n    orientation:0,\n    linear_velocity:0,\n    angular_velocity: 0,\n  };\n  constructor(){\n    super();\n    this.init_connection();\n  }\n  // create a pose subscriber\n  getRobotState(){\n  var pose_subscriber = new window.ROSLIB.Topic({\n    ros: this.state.ros,\n    name: \"/amcl_pose\",\n    messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n  });\n  // subscriber callback function\n  pose_subscriber.subscribe((message) => {\n    this.setState({x: message.pose.pose.position.x.toFixed(2)});\n    this.setState({y: message.pose.pose.position.y.toFixed(2)});\n    this.setState({\n      orientation: this.getOrientationFromQuanternion(message.pose.pose.orientation).toFixed(2)});\n  });\n  // create an odm (velocity) subscribe\n  var velocity_sub = new window.ROSLIB.Topic({\n    ros: this.state.ros,\n    name: \"/odom\",\n    messageType: \"nav_msgs/Odometry\",\n  });\n  velocity_sub.subscribe((message) => {\n    this.setState({linear_velocity: message.twist.twist.linear.x.toFixed(2)});\n    this.setState({angular_velocity: message.twist.twist.angular.z.toFixed(2)});\n  });\n  }\n\n  getOrientationFromQuanternion(ros_orientation_quaternion){\n      var q = new Three.Quaternion(ros_orientation_quaternion.x,\n                ros_orientation_quaternion.y,\n                ros_orientation_quaternion.z,\n                ros_orientation_quaternion.w);\n      var rpy = new Three.Euler().setFromQuaternion(q);\n      return (rpy[\"_z\"]*180 / 3.14);\n  }\n\n\n  init_connection(){\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\",()=>{\n      console.log(\"connection is established In the Tele component!\");\n      this.setState({connected: true});\n    });\n    this.state.ros.on(\"close\",()=>{\n      console.log(\"connection is closed In the Tele component!\");\n      this.setState({connected: false});\n      // try to reconnecet every 3 sec\n      setTimeout(() => {\n      try{\n        this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.RSOBRIDGE_PORT+\"\");\n      }catch(error){\n        console.log(\"Connection problem\");\n      }\n    }, Config.CONNECTION_TIMER);\n    });\n\n  try{\n    this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.RSOBRIDGE_PORT+\"\");\n  }catch(error){\n    console.log(\"Connection problem\");\n  }\n  }\n\n  componentDidMount(){\n    this.getRobotState()\n  }\n\n\n\n  render (){\n    return(\n      <div>\n        <Row>\n          <Col>\n            <h4 className = \"mt-4\">Position</h4>\n            <p className=\"mt-0\">x:{this.state.x}</p>\n            <p className=\"mt-0\">y:{this.state.y}</p>\n            <p className=\"mt-0\">Orientation:{this.state.orientation}</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h4 className = \"mt-4\">Velocities</h4>\n            <p className=\"mt-0\">Linear:{this.state.linear_velocity}</p>\n            <p className=\"mt-0\">Angular:{this.state.angular_velocity}</p>\n          </Col>\n        </Row>\n      </div>\n  );\n  }\n}\n\nexport default RobotState;\n"]},"metadata":{},"sourceType":"module"}