{"ast":null,"code":"var _jsxFileName = \"/home/robotuser10/Downloads/my-app/src/components/Conection.jsx\";\nimport React, { Component } from \"react\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Connection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      connected: false,\n      ros: null\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection is established!\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({\n        connected: false\n      }); // try to reconnecet every 3 sec\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.RSOBRIDGE_PORT + \"\");\n        } catch (error) {\n          console.log(\"Connection problem\");\n        }\n      }, Config.CONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.RSOBRIDGE_PORT + \"\");\n    } catch (error) {\n      console.log(\"Connection problem\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          className: \"text-center\",\n          variant: this.state.connected ? \"success\" : \"danger\",\n          children: this.state.connected ? \"Robot Connected\" : \"Robot Disconneceted\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Connection;","map":{"version":3,"sources":["/home/robotuser10/Downloads/my-app/src/components/Conection.jsx"],"names":["React","Component","Container","Navbar","Nav","Alert","Config","Connection","constructor","state","connected","ros","init_connection","window","ROSLIB","Ros","console","log","on","setState","setTimeout","connect","ROSBRIDGE_SERVER_IP","RSOBRIDGE_PORT","error","CONNECTION_TIMER","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,SAAQC,SAAR,EAAmBC,MAAnB,EAA0BC,GAA1B,QAAoC,iBAApC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AACA,MAAMC,UAAN,SAAyBN,SAAzB,CAAmC;AAEjCO,EAAAA,WAAW,GAAE;AACX;AADW,SADbC,KACa,GADL;AAACC,MAAAA,SAAS,EAAE,KAAZ;AAAmBC,MAAAA,GAAG,EAAE;AAAxB,KACK;AAEX,SAAKC,eAAL;AACD;;AACDA,EAAAA,eAAe,GAAE;AACf,SAAKH,KAAL,CAAWE,GAAX,GAAiB,IAAIE,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWE,GAAvB;AAEA,SAAKF,KAAL,CAAWE,GAAX,CAAeO,EAAf,CAAkB,YAAlB,EAA+B,MAAI;AACjCF,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,WAAKE,QAAL,CAAc;AAACT,QAAAA,SAAS,EAAE;AAAZ,OAAd;AACD,KAHD;AAIA,SAAKD,KAAL,CAAWE,GAAX,CAAeO,EAAf,CAAkB,OAAlB,EAA0B,MAAI;AAC5BF,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,WAAKE,QAAL,CAAc;AAACT,QAAAA,SAAS,EAAE;AAAZ,OAAd,EAF4B,CAG5B;;AACAU,MAAAA,UAAU,CAAC,MAAM;AACjB,YAAG;AACD,eAAKX,KAAL,CAAWE,GAAX,CAAeU,OAAf,CAAuB,UAAQf,MAAM,CAACgB,mBAAf,GAAmC,GAAnC,GAAuChB,MAAM,CAACiB,cAA9C,GAA6D,EAApF;AACD,SAFD,CAEC,OAAMC,KAAN,EAAY;AACXR,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACF,OANW,EAMTX,MAAM,CAACmB,gBANE,CAAV;AAOD,KAXD;;AAaF,QAAG;AACD,WAAKhB,KAAL,CAAWE,GAAX,CAAeU,OAAf,CAAuB,UAAQf,MAAM,CAACgB,mBAAf,GAAmC,GAAnC,GAAuChB,MAAM,CAACiB,cAA9C,GAA6D,EAApF;AACD,KAFD,CAEC,OAAMC,KAAN,EAAY;AACXR,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;AACA;;AACDS,EAAAA,MAAM,GAAE;AACN,wBACE,QAAC,SAAD;AAAA,6BACE;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,SAAS,EAAG,aAAnB;AAAiC,UAAA,OAAO,EAAI,KAAKjB,KAAL,CAAWC,SAAX,GAAsB,SAAtB,GAAiC,QAA7E;AAAA,oBACG,KAAKD,KAAL,CAAWC,SAAX,GAAsB,iBAAtB,GAAyC;AAD5C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AA3CgC;;AA6CnC,eAAeH,UAAf","sourcesContent":["import React, {Component } from \"react\";\nimport {Container, Navbar,Nav} from \"react-bootstrap\";\nimport Alert from \"react-bootstrap/Alert\"\nimport Config from \"../scripts/config\"\nclass Connection extends Component {\n  state = {connected: false, ros: null};\n  constructor(){\n    super();\n    this.init_connection();\n  }\n  init_connection(){\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\",()=>{\n      console.log(\"connection is established!\");\n      this.setState({connected: true});\n    });\n    this.state.ros.on(\"close\",()=>{\n      console.log(\"connection is closed!\");\n      this.setState({connected: false});\n      // try to reconnecet every 3 sec\n      setTimeout(() => {\n      try{\n        this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.RSOBRIDGE_PORT+\"\");\n      }catch(error){\n        console.log(\"Connection problem\");\n      }\n    }, Config.CONNECTION_TIMER);\n    });\n\n  try{\n    this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.RSOBRIDGE_PORT+\"\");\n  }catch(error){\n    console.log(\"Connection problem\");\n  }\n  }\n  render(){\n    return (\n      <Container>\n        <div>\n          <Alert className = \"text-center\" variant = {this.state.connected? \"success\": \"danger\"}>\n            {this.state.connected? \"Robot Connected\": \"Robot Disconneceted\"}\n            </Alert>\n        </div>\n      </Container>\n    );\n  }\n}\nexport default Connection;\n"]},"metadata":{},"sourceType":"module"}