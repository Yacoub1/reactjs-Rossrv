{"ast":null,"code":"var _jsxFileName = \"/home/robotuser10/Downloads/my-app/src/components/Rossrv.jsx\";\nimport React, { Component } from 'react';\nimport Config from \"../scripts/config\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Slider, { SliderTooltip } from 'rc-slider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Rossrv extends Component {\n  handle() {\n    return /*#__PURE__*/_jsxDEV(SliderTooltip, {\n      prefixCls: \"rc-slider-tooltip\",\n      overlay: `${value} %`,\n      visible: dragging,\n      placement: \"top\",\n      children: /*#__PURE__*/_jsxDEV(Handle, {\n        value: value,\n        ...restProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this);\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    const {\n      createSliderWithTooltip\n    } = Slider;\n  } // create a pose subscriber\n\n\n  init_connection() {\n    console.log(\"Establish map connection\");\n\n    try {\n      this.state.ros = new window.ROSLIB.Ros();\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.RSOBRIDGE_PORT + \"\");\n      console.log(\"In map components\");\n    } catch (error) {\n      console.log(\"Connection problem in map components\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: wrapperStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Slider with custom handle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        min: 0,\n        max: 20,\n        defaultValue: 3,\n        handle: handle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Rossrv;","map":{"version":3,"sources":["/home/robotuser10/Downloads/my-app/src/components/Rossrv.jsx"],"names":["React","Component","Config","Row","Col","Container","Button","Slider","SliderTooltip","Rossrv","handle","value","dragging","restProps","index","constructor","state","ros","createSliderWithTooltip","init_connection","console","log","window","ROSLIB","Ros","connect","ROSBRIDGE_SERVER_IP","RSOBRIDGE_PORT","error","componentDidMount","render","wrapperStyle"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,GAAR,EAAYC,GAAZ,EAAiBC,SAAjB,EAA4BC,MAA5B,QAAyC,iBAAzC;AACA,OAAOC,MAAP,IAAiBC,aAAjB,QAAsC,WAAtC;;;AAEA,MAAMC,MAAN,SAAqBR,SAArB,CAA+B;AAI7BS,EAAAA,MAAM,GAAE;AAEN,wBACE,QAAC,aAAD;AACE,MAAA,SAAS,EAAC,mBADZ;AAEE,MAAA,OAAO,EAAG,GAAEC,KAAM,IAFpB;AAGE,MAAA,OAAO,EAAEC,QAHX;AAIE,MAAA,SAAS,EAAC,KAJZ;AAAA,6BAOE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAED,KAAf;AAAA,WAA0BE;AAA1B;AAAA;AAAA;AAAA;AAAA;AAPF,OAKOC,KALP;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AACDC,EAAAA,WAAW,GAAE;AACX;AADW,SAjBbC,KAiBa,GAjBL;AAACC,MAAAA,GAAG,EAAE;AAAN,KAiBK;AAEX,UAAM;AAAEC,MAAAA;AAAF,QAA8BX,MAApC;AAEC,GAtB0B,CAuB7B;;;AACAY,EAAAA,eAAe,GAAE;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;;AAEE,QAAG;AACD,WAAKL,KAAL,CAAWC,GAAX,GAAiB,IAAIK,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB;AACA,WAAKR,KAAL,CAAWC,GAAX,CAAeQ,OAAf,CACE,UAAQvB,MAAM,CAACwB,mBAAf,GAAmC,GAAnC,GAAuCxB,MAAM,CAACyB,cAA9C,GAA6D,EAD/D;AAGAP,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KAND,CAMC,OAAMO,KAAN,EAAa;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACD;AACF;;AAEJQ,EAAAA,iBAAiB,GAAE;AACd,SAAKV,eAAL;AACD;;AAEHW,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAK,MAAA,KAAK,EAAEC,YAAZ;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,GAAG,EAAE,CAAb;AAAgB,QAAA,GAAG,EAAE,EAArB;AAAyB,QAAA,YAAY,EAAE,CAAvC;AAA0C,QAAA,MAAM,EAAErB;AAAlD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAlD4B;;AAoD/B,eAAeD,MAAf","sourcesContent":["import React, {Component} from 'react';\nimport Config from \"../scripts/config\";\nimport {Row,Col, Container, Button} from \"react-bootstrap\";\nimport Slider, { SliderTooltip } from 'rc-slider';\n\nclass Rossrv extends Component {\n  state = {ros: null,\n\n              };\n  handle(){\n    \n    return (\n      <SliderTooltip\n        prefixCls=\"rc-slider-tooltip\"\n        overlay={`${value} %`}\n        visible={dragging}\n        placement=\"top\"\n        key={index}\n      >\n        <Handle value={value} {...restProps} />\n      </SliderTooltip>\n    );\n  }\n  constructor(){\n    super();\n    const { createSliderWithTooltip } = Slider;\n\n    }\n  // create a pose subscriber\n  init_connection(){\n    console.log(\"Establish map connection\");\n\n      try{\n        this.state.ros = new window.ROSLIB.Ros();\n        this.state.ros.connect(\n          \"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.RSOBRIDGE_PORT+\"\"\n        );\n        console.log(\"In map components\");\n      }catch(error) {\n        console.log(\"Connection problem in map components\");\n      }\n    }\n\n componentDidMount(){\n      this.init_connection();\n    }\n\n  render (){\n\n    return(\n      <div style={wrapperStyle}>\n        <p>Slider with custom handle</p>\n        <Slider min={0} max={20} defaultValue={3} handle={handle} />\n      </div>\n      );\n  }\n}\nexport default Rossrv;\n"]},"metadata":{},"sourceType":"module"}