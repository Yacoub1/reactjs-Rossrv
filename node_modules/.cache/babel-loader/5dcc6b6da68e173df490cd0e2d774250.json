{"ast":null,"code":"var _jsxFileName = \"/home/robotuser10/Downloads/my-app/src/components/Rossrv.jsx\";\nimport React, { Component } from 'react';\nimport Config from \"../scripts/config\";\nimport { Form, Range, Input, Row, Col, Container, Button } from \"react-bootstrap\";\nimport Slider from 'react-input-slider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Rossrv extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      x: 10,\n      y: 10\n    };\n    const [state, setState] = useState({\n      x: 10,\n      y: 10\n    });\n  } // create a pose subscriber\n\n\n  init_connection() {\n    console.log(\"Establish map connection\");\n\n    try {\n      this.state.ros = new window.ROSLIB.Ros();\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.RSOBRIDGE_PORT + \"\");\n      console.log(\"In map components\");\n    } catch (error) {\n      console.log(\"Connection problem in map components\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"(\", state.x, \", \", state.y, \")\", /*#__PURE__*/_jsxDEV(Slider, {\n        axis: \"xy\",\n        x: state.x,\n        y: state.y,\n        onChange: setState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        axis: \"x\",\n        x: state.x,\n        onChange: _ref => {\n          let {\n            x\n          } = _ref;\n          return setState(state => ({ ...state,\n            x\n          }));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        axis: \"y\",\n        y: state.y,\n        onChange: _ref2 => {\n          let {\n            y\n          } = _ref2;\n          return setState(state => ({ ...state,\n            y\n          }));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Rossrv;","map":{"version":3,"sources":["/home/robotuser10/Downloads/my-app/src/components/Rossrv.jsx"],"names":["React","Component","Config","Form","Range","Input","Row","Col","Container","Button","Slider","Rossrv","constructor","state","ros","x","y","setState","useState","init_connection","console","log","window","ROSLIB","Ros","connect","ROSBRIDGE_SERVER_IP","RSOBRIDGE_PORT","error","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,IAAR,EAAaC,KAAb,EAAoBC,KAApB,EAA2BC,GAA3B,EAA+BC,GAA/B,EAAoCC,SAApC,EAA+CC,MAA/C,QAA4D,iBAA5D;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;;AAEA,MAAMC,MAAN,SAAqBV,SAArB,CAA+B;AAO7BW,EAAAA,WAAW,GAAE;AACX;AADW,SANbC,KAMa,GANL;AAACC,MAAAA,GAAG,EAAE,IAAN;AACEC,MAAAA,CAAC,EAAC,EADJ;AAEEC,MAAAA,CAAC,EAAC;AAFJ,KAMK;AAEX,UAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBC,QAAQ,CAAC;AAAEH,MAAAA,CAAC,EAAE,EAAL;AAASC,MAAAA,CAAC,EAAE;AAAZ,KAAD,CAAlC;AACG,GAVwB,CAW7B;;;AACAG,EAAAA,eAAe,GAAE;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;;AAEE,QAAG;AACD,WAAKR,KAAL,CAAWC,GAAX,GAAiB,IAAIQ,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB;AACA,WAAKX,KAAL,CAAWC,GAAX,CAAeW,OAAf,CACE,UAAQvB,MAAM,CAACwB,mBAAf,GAAmC,GAAnC,GAAuCxB,MAAM,CAACyB,cAA9C,GAA6D,EAD/D;AAGAP,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KAND,CAMC,OAAMO,KAAN,EAAa;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACD;AACF;;AAEJQ,EAAAA,iBAAiB,GAAE;AACd,SAAKV,eAAL;AACD;;AAIHW,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAA,sBACIjB,KAAK,CAACE,CADV,QACeF,KAAK,CAACG,CADrB,oBAEE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,IAAb;AAAkB,QAAA,CAAC,EAAEH,KAAK,CAACE,CAA3B;AAA8B,QAAA,CAAC,EAAEF,KAAK,CAACG,CAAvC;AAA0C,QAAA,QAAQ,EAAEC;AAApD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AACE,QAAA,IAAI,EAAC,GADP;AAEE,QAAA,CAAC,EAAEJ,KAAK,CAACE,CAFX;AAGE,QAAA,QAAQ,EAAE;AAAA,cAAC;AAAEA,YAAAA;AAAF,WAAD;AAAA,iBAAWE,QAAQ,CAACJ,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAYE,YAAAA;AAAZ,WAAL,CAAN,CAAnB;AAAA;AAHZ;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,GAAb;AAAiB,QAAA,CAAC,EAAEF,KAAK,CAACG,CAA1B;AAA6B,QAAA,QAAQ,EAAE;AAAA,cAAC;AAAEA,YAAAA;AAAF,WAAD;AAAA,iBAAWC,QAAQ,CAACJ,KAAK,KAAK,EAAE,GAAGA,KAAL;AAAYG,YAAAA;AAAZ,WAAL,CAAN,CAAnB;AAAA;AAAvC;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA9C4B;;AAgD/B,eAAeL,MAAf","sourcesContent":["import React, {Component} from 'react';\nimport Config from \"../scripts/config\";\nimport {Form,Range, Input, Row,Col, Container, Button} from \"react-bootstrap\";\nimport Slider from 'react-input-slider';\n\nclass Rossrv extends Component {\n  state = {ros: null,\n            x:10,\n            y:10\n              };\n\n\n  constructor(){\n    super();\n    const [state, setState] = useState({ x: 10, y: 10 });\n      }\n  // create a pose subscriber\n  init_connection(){\n    console.log(\"Establish map connection\");\n\n      try{\n        this.state.ros = new window.ROSLIB.Ros();\n        this.state.ros.connect(\n          \"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.RSOBRIDGE_PORT+\"\"\n        );\n        console.log(\"In map components\");\n      }catch(error) {\n        console.log(\"Connection problem in map components\");\n      }\n    }\n\n componentDidMount(){\n      this.init_connection();\n    }\n\n\n\n  render (){\n\n    return(\n      <div>\n        ({state.x}, {state.y})\n        <Slider axis=\"xy\" x={state.x} y={state.y} onChange={setState} />\n        <Slider\n          axis=\"x\"\n          x={state.x}\n          onChange={({ x }) => setState(state => ({ ...state, x }))}\n        />\n        <Slider axis=\"y\" y={state.y} onChange={({ y }) => setState(state => ({ ...state, y }))} />\n      </div>\n      );\n  }\n}\nexport default Rossrv;\n"]},"metadata":{},"sourceType":"module"}