{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { webSocket } from 'rxjs/webSocket';\nimport { Subject } from 'rxjs';\nimport { take, filter, pluck, map, tap } from 'rxjs/operators';\n\nclass NgxRoslibService {\n  constructor() {\n    this.isConnected = false;\n  }\n\n  set statusLevel(level) {\n    if (this.ros) this.ros.statusLevel = level;\n  }\n\n  connect(url) {\n    let transportLibrary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'websocket';\n    let transportOptions = arguments.length > 2 ? arguments[2] : undefined;\n    const ros = this.ros = new Rosbridge();\n    this.connection$ = ros.connect(url, transportLibrary, transportOptions);\n    this.onOpen = ros.onOpen;\n    this.onClose = ros.onClose;\n    this.onError = ros.onError;\n    return ros;\n  }\n\n  ngOnDestroy() {\n    var _a;\n\n    (_a = this.connection$) === null || _a === void 0 ? void 0 : _a.complete();\n  }\n\n}\n\nNgxRoslibService.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"12.2.1\",\n  ngImport: i0,\n  type: NgxRoslibService,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.Injectable\n});\nNgxRoslibService.ɵprov = i0.ɵɵngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"12.2.1\",\n  ngImport: i0,\n  type: NgxRoslibService,\n  providedIn: 'root'\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"12.2.1\",\n  ngImport: i0,\n  type: NgxRoslibService,\n  decorators: [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }],\n  ctorParameters: function () {\n    return [];\n  }\n});\n\nclass Rosbridge {\n  constructor(url, transportLibrary, transportOptions) {\n    this.isConnected = false;\n    this.transportLibrary = 'websocket';\n    this.connectionOpened$ = new Subject();\n    this.onOpen = this.connectionOpened$.asObservable();\n    this.connectionClosed$ = new Subject();\n    this.onClose = this.connectionClosed$.asObservable();\n    this.connectionError$ = new Subject();\n    this.onError = this.connectionError$.asObservable();\n\n    if (url) {\n      this.connection$ = this.connect(url, transportLibrary !== null && transportLibrary !== void 0 ? transportLibrary : 'websocket', transportOptions);\n    }\n  }\n\n  set statusLevel(level) {\n    const setStateLevelRequest = new SetStatusLevel(level);\n    this.sendRequest(setStateLevelRequest);\n  }\n\n  connect(url) {\n    let transportLibrary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'websocket';\n    let transportOptions = arguments.length > 2 ? arguments[2] : undefined;\n\n    var _a;\n\n    this.transportOptions = transportOptions;\n    this.transportLibrary = transportLibrary;\n    let wsUrl;\n\n    if (transportLibrary === 'websocket') {\n      wsUrl = url.replace(/(http)(s)?:\\/\\//, 'ws$2://');\n\n      if (!this.connection$ || this.connection$.closed) {\n        this.connection$ = webSocket({\n          url: wsUrl,\n          binaryType: 'arraybuffer',\n          openObserver: {\n            next: value => {\n              this.isConnected = true;\n              this.connectionOpened$.next(value);\n            }\n          },\n          closeObserver: {\n            next: closeEvent => {\n              this.isConnected = false;\n              this.connectionClosed$.next(closeEvent);\n            }\n          },\n          closingObserver: {\n            next: () => {}\n          }\n        });\n      }\n    } else if (transportLibrary === 'workerSocket') {// TODO: add websocket in web worker implementation for the connect method\n      //\n    }\n\n    (_a = this.connection$) === null || _a === void 0 ? void 0 : _a.subscribe(() => {}, () => {}); // Needed to open the websocket\n\n    return this.connection$;\n  }\n\n  authenticate(mac, client, dest, rand, t, level, end) {\n    this.sendRequest({\n      op: 'auth',\n      mac: mac,\n      client: client,\n      dest: dest,\n      rand: rand,\n      t: t,\n      level: level,\n      end: end\n    });\n  }\n\n  sendRequest(message) {\n    var _a, _b;\n\n    if (!this.isConnected) {\n      console.log('Trying to send request, but not connected. Waiting...');\n      (_a = this.onOpen) === null || _a === void 0 ? void 0 : _a.pipe(take(1)).subscribe(() => {\n        var _a;\n\n        return (_a = this.connection$) === null || _a === void 0 ? void 0 : _a.next(message);\n      });\n    } else {\n      (_b = this.connection$) === null || _b === void 0 ? void 0 : _b.next(message);\n    }\n  }\n\n  getTopics(callback, failedCallback) {\n    const topicsService = new RosService({\n      ros: this,\n      name: '/rosapi/topics',\n      serviceType: 'rosapi/Topics'\n    });\n\n    if (failedCallback) {\n      topicsService.call({}, msg => {\n        callback(msg.topics);\n      }, failedCallback);\n    } else {\n      topicsService.call({}, msg => {\n        callback(msg.topics);\n      });\n    }\n  }\n\n  getNodes(callback, failedCallback) {\n    const topicsService = new RosService({\n      ros: this,\n      name: '/rosapi/nodes',\n      serviceType: 'rosapi/Nodes'\n    });\n\n    if (failedCallback) {\n      topicsService.call({}, msg => {\n        callback(msg.nodes);\n      }, failedCallback);\n    } else {\n      topicsService.call({}, msg => {\n        callback(msg.nodes);\n      });\n    }\n  }\n\n}\n\nlet idCounter = 0;\n\nclass RosbridgeProtocol {}\n\nclass SetStatusLevel extends RosbridgeProtocol {\n  constructor(level, id) {\n    super();\n    this.op = 'set_level';\n    this.level = level;\n    this.id = id;\n  }\n\n}\n\nclass StatusMessage extends RosbridgeProtocol {\n  constructor(level, msg, id) {\n    super();\n    this.op = 'status';\n    this.level = level;\n    this.id = id;\n    this.msg = msg;\n  }\n\n}\n\nclass Authenticate extends RosbridgeProtocol {\n  constructor(mac, client, dest, rand, t, level, end) {\n    super();\n    this.op = 'auth';\n    this.mac = mac;\n    this.client = client;\n    this.dest = dest;\n    this.rand = rand;\n    this.t = t;\n    this.level = level;\n    this.end = end;\n  }\n\n}\n\nclass Advertise extends RosbridgeProtocol {\n  constructor(topic, type, id, latch, queue_size) {\n    super();\n    this.op = 'advertise';\n    this.topic = topic;\n    this.id = `advertise:${this.topic}:${++idCounter}`;\n    this.type = type;\n    this.latch = latch !== null && latch !== void 0 ? latch : false;\n\n    if (queue_size) {\n      this.queue_size = Math.max(0, queue_size);\n    } else {\n      this.queue_size = 100;\n    }\n  }\n\n}\n\nclass Unadvertise extends RosbridgeProtocol {\n  constructor(topic, id) {\n    super();\n    this.op = 'unadvertise';\n    this.id = id;\n    this.topic = topic;\n  }\n\n}\n\nclass Publish extends RosbridgeProtocol {\n  constructor(topic, msg, id, latch, queue_size) {\n    super();\n    this.op = 'publish';\n    this.topic = topic;\n    this.id = `publish:${this.topic}:${++idCounter}`; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this.msg = msg;\n    this.latch = latch !== null && latch !== void 0 ? latch : false;\n\n    if (queue_size) {\n      this.queue_size = Math.max(0, queue_size);\n    } else {\n      this.queue_size = 100;\n    }\n  }\n\n}\n\nclass Subscribe extends RosbridgeProtocol {\n  constructor(topic, type, throttle_rate, queue_length, fragment_size, compression, id) {\n    super();\n    this.op = 'subscribe';\n    this.topic = topic;\n    this.id = `subscribe:${this.topic}:${++idCounter}`;\n    this.type = type;\n    this.throttle_rate = throttle_rate !== null && throttle_rate !== void 0 ? throttle_rate : 0;\n    this.queue_length = queue_length !== null && queue_length !== void 0 ? queue_length : 0;\n    this.fragment_size = fragment_size;\n    this.compression = compression !== null && compression !== void 0 ? compression : 'none';\n  }\n\n}\n\nclass ServiceCall extends RosbridgeProtocol {\n  constructor(service, args, id, fragment_size, compression) {\n    super();\n    this.args = {};\n    this.op = 'call_service';\n    this.service = service;\n    this.id = id !== null && id !== void 0 ? id : `call_service:${this.service}:${++idCounter}`; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this.args = args !== null && args !== void 0 ? args : {};\n    this.fragment_size = fragment_size;\n    this.compression = compression;\n  }\n\n}\n\nclass AdvertiseService extends RosbridgeProtocol {\n  constructor(type, service) {\n    super();\n    this.op = 'advertise_service';\n    this.type = type;\n    this.service = service;\n  }\n\n}\n\nclass UnadvertiseService extends RosbridgeProtocol {\n  constructor(service) {\n    super();\n    this.op = 'unadvertise_service';\n    this.service = service;\n  }\n\n}\n\nclass ServiceRequest extends RosbridgeProtocol {}\n\nclass ServiceResponse extends RosbridgeProtocol {\n  constructor(service, result, values, id) {\n    super();\n    this.op = 'service_response';\n    this.id = id;\n    this.service = service; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n    this.values = values !== null && values !== void 0 ? values : {};\n    this.result = result;\n  }\n\n}\n\nclass Unsubscribe extends RosbridgeProtocol {\n  constructor(topic, id) {\n    super();\n    this.op = 'unsubscribe';\n    this.topic = topic;\n    this.id = id;\n  }\n\n}\n/**\r\n * RosTopic class used to instantiate a topic, subscribe to its event and advertise future events regarding the topic\r\n */\n\n\nclass RosTopic {\n  constructor(_ref) {\n    let {\n      ros,\n      name,\n      messageType,\n      compression = 'none',\n      throttleRate = 0,\n      latch = false,\n      queueSize = 100,\n      queueLength = 0,\n      reconnectOnClose = true\n    } = _ref;\n    this.ros = ros;\n    this.name = name;\n    this.messageType = messageType;\n    this.compression = compression;\n    this.throttleRate = throttleRate;\n    this.latch = latch;\n    this.queueSize = queueSize;\n    this.queueLength = queueLength;\n    this.reconnectOnClose = reconnectOnClose;\n    this.throttleRate = Math.max(this.throttleRate, 0);\n  }\n\n  subscribe(callback) {\n    var _a, _b;\n\n    const subRequest = new Subscribe(this.name, this.messageType);\n    this.observable$ = (_a = this.ros.connection$) === null || _a === void 0 ? void 0 : _a.pipe(filter(data => (data === null || data === void 0 ? void 0 : data.topic) === this.name && (data === null || data === void 0 ? void 0 : data.op) === 'publish' // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    ), pluck('msg'));\n    this.sub = (_b = this.observable$) === null || _b === void 0 ? void 0 : _b.subscribe(message => callback(message));\n    this.id = subRequest.id;\n    this.ros.sendRequest(subRequest);\n  }\n\n  unsubscribe() {\n    var _a;\n\n    const unsubRequest = new Unsubscribe(this.name, this.id);\n    this.ros.sendRequest(unsubRequest);\n    (_a = this.sub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n\n  advertise() {\n    const advertiseRequest = new Advertise(this.name, this.messageType, this.id, this.latch, this.queueSize);\n    this.id = advertiseRequest.id;\n    this.ros.sendRequest(advertiseRequest);\n  }\n\n  publish(msg) {\n    const publishRequest = new Publish(this.name, msg, this.id, this.latch, this.queueSize);\n    this.ros.sendRequest(publishRequest);\n  }\n\n  unadvertise() {\n    const unadvertiseRequest = new Unadvertise(this.name, this.id);\n    this.ros.sendRequest(unadvertiseRequest);\n  }\n\n}\n\nclass RosService {\n  constructor(_ref2) {\n    let {\n      ros,\n      name,\n      serviceType\n    } = _ref2;\n    this.isAdvertised = false;\n    this.ros = ros;\n    this.name = name;\n    this.serviceType = serviceType;\n  }\n\n  advertise(callback) {\n    var _a;\n\n    const serviceAdvertiseRequest = new AdvertiseService(this.serviceType, this.name);\n    (_a = this.ros.connection$) === null || _a === void 0 ? void 0 : _a.pipe(filter(data => (data === null || data === void 0 ? void 0 : data.service) === this.name && // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    (data === null || data === void 0 ? void 0 : data.op) === 'call_service' // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    ), // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    map(_ref3 => {\n      let {\n        args,\n        id\n      } = _ref3;\n      return {\n        args,\n        id\n      };\n    })).subscribe(req => {\n      var _a;\n\n      const res = callback(req.args);\n      const serviceResponse = new ServiceResponse(this.name, true, res, (_a = req.id) !== null && _a !== void 0 ? _a : '');\n      this.ros.sendRequest(serviceResponse);\n    });\n    this.ros.sendRequest(serviceAdvertiseRequest);\n    this.isAdvertised = true;\n  }\n\n  call(req, callback, failedCallback) {\n    var _a;\n\n    const serviceCallRequest = new ServiceCall(this.name, req);\n    (_a = this.ros.connection$) === null || _a === void 0 ? void 0 : _a.pipe(filter(data => (data === null || data === void 0 ? void 0 : data.service) === this.name && // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    (data === null || data === void 0 ? void 0 : data.id) === serviceCallRequest.id && // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    (data === null || data === void 0 ? void 0 : data.op) === 'service_response' // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    ), tap(msg => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if ((msg === null || msg === void 0 ? void 0 : msg.result) !== undefined && (msg === null || msg === void 0 ? void 0 : msg.result) === false) if (failedCallback) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        failedCallback(msg.values);\n      }\n    }), // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    filter(data => (data === null || data === void 0 ? void 0 : data.result) !== false), pluck('values'), take(1)).subscribe(message => callback(message));\n    this.ros.sendRequest(serviceCallRequest);\n  }\n\n  unadvertise() {\n    if (!this.isAdvertised) return;\n    const serviceUnadvertiseRequest = new UnadvertiseService(this.name);\n    this.ros.sendRequest(serviceUnadvertiseRequest);\n  }\n\n}\n\nclass RosParam {\n  constructor(_ref4) {\n    let {\n      ros,\n      name\n    } = _ref4;\n    this.ros = ros;\n    this.name = name;\n  }\n\n  get(callback) {\n    const paramService = new RosService({\n      ros: this.ros,\n      name: '/rosapi/get_param',\n      serviceType: 'rosapi/GetParam'\n    });\n    paramService.call({\n      name: this.name\n    }, res => {\n      // @ts-ignore\n      callback(JSON.parse(res.value));\n    });\n  }\n\n  set(newValue, callback) {\n    const paramService = new RosService({\n      ros: this.ros,\n      name: '/rosapi/set_param',\n      serviceType: 'rosapi/SetParam'\n    });\n    paramService.call({\n      name: this.name,\n      value: JSON.stringify(newValue)\n    }, () => {\n      callback();\n    });\n  }\n\n  delete(callback) {\n    const paramService = new RosService({\n      ros: this.ros,\n      name: '/rosapi/delete_param',\n      serviceType: 'rosapi/DeleteParam'\n    });\n    paramService.call({\n      name: this.name\n    }, () => {\n      callback();\n    });\n  }\n\n}\n\nvar RosoutLevel;\n\n(function (RosoutLevel) {\n  RosoutLevel[RosoutLevel[\"DEBUG\"] = 1] = \"DEBUG\";\n  RosoutLevel[RosoutLevel[\"INFO\"] = 2] = \"INFO\";\n  RosoutLevel[RosoutLevel[\"WARN\"] = 4] = \"WARN\";\n  RosoutLevel[RosoutLevel[\"ERROR\"] = 8] = \"ERROR\";\n  RosoutLevel[RosoutLevel[\"FATAL\"] = 16] = \"FATAL\";\n})(RosoutLevel || (RosoutLevel = {}));\n/*\r\n * Public API Surface of ngx-roslib\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxRoslibService, RosParam, RosService, RosTopic, Rosbridge, RosoutLevel };","map":{"version":3,"mappings":"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","names":["NgxRoslibService","constructor","statusLevel","level","ros","connect","url","transportLibrary","transportOptions","Rosbridge","connection$","onOpen","onClose","onError","ngOnDestroy","_a","complete","deps","target","providedIn","decorators","Injectable","Subject","connectionOpened$","asObservable","connectionClosed$","connectionError$","setStateLevelRequest","SetStatusLevel","sendRequest","wsUrl","replace","closed","webSocket","binaryType","openObserver","next","value","isConnected","closeObserver","closeEvent","closingObserver","subscribe","authenticate","mac","client","dest","rand","t","end","op","message","console","log","pipe","take","_b","getTopics","callback","failedCallback","topicsService","RosService","name","serviceType","call","msg","topics","getNodes","nodes","idCounter","RosbridgeProtocol","id","StatusMessage","Authenticate","Advertise","topic","type","latch","queue_size","Math","max","Unadvertise","Publish","Subscribe","throttle_rate","queue_length","fragment_size","compression","ServiceCall","service","args","AdvertiseService","UnadvertiseService","ServiceRequest","ServiceResponse","result","values","Unsubscribe","RosTopic","messageType","throttleRate","queueSize","queueLength","reconnectOnClose","subRequest","observable$","filter","data","pluck","sub","unsubscribe","unsubRequest","advertise","advertiseRequest","publish","publishRequest","unadvertise","unadvertiseRequest","serviceAdvertiseRequest","map","req","res","serviceResponse","isAdvertised","serviceCallRequest","tap","undefined","serviceUnadvertiseRequest","RosParam","get","paramService","JSON","parse","set","newValue","stringify","delete","RosoutLevel"],"sources":["/home/robotuser10/ur10_catkinworkspace/my-app/projects/ngx-roslib/src/lib/ngx-roslib.service.ts","/home/robotuser10/ur10_catkinworkspace/my-app/projects/ngx-roslib/src/lib/ros-message.model.ts","/home/robotuser10/ur10_catkinworkspace/my-app/projects/ngx-roslib/src/public-api.ts","/home/robotuser10/ur10_catkinworkspace/my-app/projects/ngx-roslib/src/ngx-roslib.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\r\nimport { Observable, Subject, Subscription } from 'rxjs';\r\nimport { filter, pluck, take, tap, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgxRoslibService implements OnDestroy {\r\n    connection$: WebSocketSubject<any> | undefined;\r\n    onOpen: Observable<any> | undefined;\r\n    onClose: Observable<CloseEvent> | undefined;\r\n    onError: Observable<any> | undefined;\r\n    isConnected = false;\r\n    private ros: Rosbridge | undefined;\r\n\r\n    constructor() {}\r\n\r\n    set statusLevel(level: StatusMessageLevel) {\r\n        if (this.ros) this.ros.statusLevel = level;\r\n    }\r\n\r\n    connect(\r\n        url: string,\r\n        transportLibrary: RosLibTransportLibrary = 'websocket',\r\n        transportOptions?: RTCConfiguration\r\n    ): Rosbridge {\r\n        const ros = (this.ros = new Rosbridge());\r\n        this.connection$ = ros.connect(url, transportLibrary, transportOptions);\r\n        this.onOpen = ros.onOpen;\r\n        this.onClose = ros.onClose;\r\n        this.onError = ros.onError;\r\n        return ros;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.connection$?.complete();\r\n    }\r\n}\r\n\r\ninterface GetTopicsServiceResponse {\r\n    topics: string[];\r\n    types: string[];\r\n}\r\n\r\ninterface GetNodesServiceResponse {\r\n    nodes: string[];\r\n    types: string[];\r\n}\r\n\r\nexport class Rosbridge {\r\n    isConnected = false;\r\n    transportLibrary: RosLibTransportLibrary = 'websocket';\r\n    transportOptions: RTCConfiguration | undefined;\r\n    connection$: WebSocketSubject<any> | undefined;\r\n    private connectionOpened$ = new Subject<Event>();\r\n    onOpen = this.connectionOpened$.asObservable();\r\n    private connectionClosed$ = new Subject<CloseEvent>();\r\n    onClose = this.connectionClosed$.asObservable();\r\n    private connectionError$ = new Subject<any>();\r\n    onError: Observable<any> | undefined = this.connectionError$.asObservable();\r\n\r\n    constructor(\r\n        url?: string,\r\n        transportLibrary?: RosLibTransportLibrary,\r\n        transportOptions?: RTCConfiguration\r\n    ) {\r\n        if (url) {\r\n            this.connection$ = this.connect(\r\n                url,\r\n                transportLibrary ?? 'websocket',\r\n                transportOptions\r\n            );\r\n        }\r\n    }\r\n\r\n    set statusLevel(level: StatusMessageLevel) {\r\n        const setStateLevelRequest = new SetStatusLevel(level);\r\n        this.sendRequest(setStateLevelRequest);\r\n    }\r\n\r\n    connect(\r\n        url: string,\r\n        transportLibrary: RosLibTransportLibrary = 'websocket',\r\n        transportOptions?: RTCConfiguration\r\n    ): WebSocketSubject<any> | undefined {\r\n        this.transportOptions = transportOptions;\r\n        this.transportLibrary = transportLibrary;\r\n        let wsUrl: string;\r\n        if (transportLibrary === 'websocket') {\r\n            wsUrl = url.replace(/(http)(s)?:\\/\\//, 'ws$2://');\r\n            if (!this.connection$ || this.connection$.closed) {\r\n                this.connection$ = webSocket({\r\n                    url: wsUrl,\r\n                    binaryType: 'arraybuffer',\r\n                    openObserver: {\r\n                        next: (value) => {\r\n                            this.isConnected = true;\r\n                            this.connectionOpened$.next(value);\r\n                        },\r\n                    },\r\n                    closeObserver: {\r\n                        next: (closeEvent) => {\r\n                            this.isConnected = false;\r\n                            this.connectionClosed$.next(closeEvent);\r\n                        },\r\n                    },\r\n                    closingObserver: {\r\n                        next: () => {},\r\n                    },\r\n                });\r\n            }\r\n        } else if (transportLibrary === 'workerSocket') {\r\n            // TODO: add websocket in web worker implementation for the connect method\r\n            //\r\n        }\r\n        this.connection$?.subscribe(\r\n            () => {},\r\n            () => {}\r\n        ); // Needed to open the websocket\r\n        return this.connection$;\r\n    }\r\n\r\n    authenticate(\r\n        mac: string,\r\n        client: string,\r\n        dest: string,\r\n        rand: string,\r\n        t: number,\r\n        level: string,\r\n        end: number\r\n    ) {\r\n        this.sendRequest({\r\n            op: 'auth',\r\n            mac: mac,\r\n            client: client,\r\n            dest: dest,\r\n            rand: rand,\r\n            t: t,\r\n            level: level,\r\n            end: end,\r\n        });\r\n    }\r\n\r\n    sendRequest(message: any) {\r\n        if (!this.isConnected) {\r\n            console.log(\r\n                'Trying to send request, but not connected. Waiting...'\r\n            );\r\n            this.onOpen\r\n                ?.pipe(take(1))\r\n                .subscribe(() => this.connection$?.next(message));\r\n        } else {\r\n            this.connection$?.next(message);\r\n        }\r\n    }\r\n\r\n    getTopics(\r\n        callback: (topics: string[]) => void,\r\n        failedCallback?: (error: any) => void\r\n    ): void {\r\n        const topicsService = new RosService<Object, GetTopicsServiceResponse>({\r\n            ros: this,\r\n            name: '/rosapi/topics',\r\n            serviceType: 'rosapi/Topics',\r\n        });\r\n\r\n        if (failedCallback) {\r\n            topicsService.call(\r\n                {},\r\n                (msg) => {\r\n                    callback(msg.topics);\r\n                },\r\n                failedCallback\r\n            );\r\n        } else {\r\n            topicsService.call({}, (msg) => {\r\n                callback(msg.topics);\r\n            });\r\n        }\r\n    }\r\n\r\n    getNodes(\r\n        callback: (nodes: string[]) => void,\r\n        failedCallback?: (error: any) => void\r\n    ): void {\r\n        const topicsService = new RosService<Object, GetNodesServiceResponse>({\r\n            ros: this,\r\n            name: '/rosapi/nodes',\r\n            serviceType: 'rosapi/Nodes',\r\n        });\r\n\r\n        if (failedCallback) {\r\n            topicsService.call(\r\n                {},\r\n                (msg) => {\r\n                    callback(msg.nodes);\r\n                },\r\n                failedCallback\r\n            );\r\n        } else {\r\n            topicsService.call({}, (msg) => {\r\n                callback(msg.nodes);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nlet idCounter: number = 0;\r\n\r\nclass RosbridgeProtocol {\r\n    op: RosbridgeOperation | undefined;\r\n}\r\n\r\nclass SetStatusLevel extends RosbridgeProtocol {\r\n    private id: string | undefined;\r\n    private level: StatusMessageLevel;\r\n\r\n    constructor(level: StatusMessageLevel, id?: string) {\r\n        super();\r\n        this.op = 'set_level';\r\n        this.level = level;\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass StatusMessage extends RosbridgeProtocol {\r\n    private id: string | undefined;\r\n    private level: StatusMessageLevel;\r\n    private msg: string;\r\n\r\n    constructor(level: StatusMessageLevel, msg: string, id?: string) {\r\n        super();\r\n        this.op = 'status';\r\n        this.level = level;\r\n        this.id = id;\r\n        this.msg = msg;\r\n    }\r\n}\r\n\r\nclass Authenticate extends RosbridgeProtocol {\r\n    private mac: string;\r\n    private client: string;\r\n    private dest: string;\r\n    private rand: string;\r\n    private t: number;\r\n    private level: string;\r\n    private end: number;\r\n\r\n    constructor(\r\n        mac: string,\r\n        client: string,\r\n        dest: string,\r\n        rand: string,\r\n        t: number,\r\n        level: string,\r\n        end: number\r\n    ) {\r\n        super();\r\n        this.op = 'auth';\r\n        this.mac = mac;\r\n        this.client = client;\r\n        this.dest = dest;\r\n        this.rand = rand;\r\n        this.t = t;\r\n        this.level = level;\r\n        this.end = end;\r\n    }\r\n}\r\n\r\nclass Advertise extends RosbridgeProtocol {\r\n    id: string | undefined;\r\n    private topic: string;\r\n    private type: string;\r\n    private latch: boolean;\r\n    private queue_size: number;\r\n\r\n    constructor(\r\n        topic: string,\r\n        type: string,\r\n        id?: string,\r\n        latch?: boolean,\r\n        queue_size?: number\r\n    ) {\r\n        super();\r\n        this.op = 'advertise';\r\n        this.topic = topic;\r\n        this.id = `advertise:${this.topic}:${++idCounter}`;\r\n        this.type = type;\r\n        this.latch = latch ?? false;\r\n        if (queue_size) {\r\n            this.queue_size = Math.max(0, queue_size);\r\n        } else {\r\n            this.queue_size = 100;\r\n        }\r\n    }\r\n}\r\n\r\nclass Unadvertise extends RosbridgeProtocol {\r\n    private id: string | undefined;\r\n    private topic: string;\r\n\r\n    constructor(topic: string, id?: string) {\r\n        super();\r\n        this.op = 'unadvertise';\r\n        this.id = id;\r\n        this.topic = topic;\r\n    }\r\n}\r\n\r\nclass Publish extends RosbridgeProtocol {\r\n    private id: string | undefined;\r\n    private topic: string;\r\n    private msg: string;\r\n    private latch: boolean;\r\n    private queue_size: number;\r\n\r\n    constructor(\r\n        topic: string,\r\n        msg: any,\r\n        id?: string,\r\n        latch?: boolean,\r\n        queue_size?: number\r\n    ) {\r\n        super();\r\n        this.op = 'publish';\r\n        this.topic = topic;\r\n        this.id = `publish:${this.topic}:${++idCounter}`;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.msg = msg;\r\n        this.latch = latch ?? false;\r\n        if (queue_size) {\r\n            this.queue_size = Math.max(0, queue_size);\r\n        } else {\r\n            this.queue_size = 100;\r\n        }\r\n    }\r\n}\r\n\r\nclass Subscribe extends RosbridgeProtocol {\r\n    id: string | undefined;\r\n    private topic: string;\r\n    private type: string | undefined;\r\n    private throttle_rate: number | undefined;\r\n    private queue_length: number | undefined;\r\n    private fragment_size: number | undefined;\r\n    private compression: RosTopicCompression | undefined;\r\n\r\n    constructor(\r\n        topic: string,\r\n        type?: string,\r\n        throttle_rate?: number,\r\n        queue_length?: number,\r\n        fragment_size?: number,\r\n        compression?: RosTopicCompression,\r\n        id?: string\r\n    ) {\r\n        super();\r\n        this.op = 'subscribe';\r\n        this.topic = topic;\r\n        this.id = `subscribe:${this.topic}:${++idCounter}`;\r\n        this.type = type;\r\n        this.throttle_rate = throttle_rate ?? 0;\r\n        this.queue_length = queue_length ?? 0;\r\n        this.fragment_size = fragment_size;\r\n        this.compression = compression ?? 'none';\r\n    }\r\n}\r\n\r\nclass ServiceCall extends RosbridgeProtocol {\r\n    id: string | undefined;\r\n    private service: string;\r\n    private args: Object | undefined = {};\r\n    private fragment_size: number | undefined;\r\n    private compression: 'none' | 'png' | undefined;\r\n\r\n    constructor(\r\n        service: string,\r\n        args?: any,\r\n        id?: string,\r\n        fragment_size?: number,\r\n        compression?: 'none' | 'png'\r\n    ) {\r\n        super();\r\n        this.op = 'call_service';\r\n        this.service = service;\r\n        this.id = id ?? `call_service:${this.service}:${++idCounter}`;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.args = args ?? {};\r\n        this.fragment_size = fragment_size;\r\n        this.compression = compression;\r\n    }\r\n}\r\n\r\nclass AdvertiseService extends RosbridgeProtocol {\r\n    private type: string;\r\n    private service: string;\r\n\r\n    constructor(type: string, service: string) {\r\n        super();\r\n        this.op = 'advertise_service';\r\n        this.type = type;\r\n        this.service = service;\r\n    }\r\n}\r\n\r\nclass UnadvertiseService extends RosbridgeProtocol {\r\n    private service: string;\r\n\r\n    constructor(service: string) {\r\n        super();\r\n        this.op = 'unadvertise_service';\r\n        this.service = service;\r\n    }\r\n}\r\n\r\nclass ServiceRequest extends RosbridgeProtocol {}\r\n\r\nclass ServiceResponse extends RosbridgeProtocol {\r\n    private id: string | undefined;\r\n    private service: string;\r\n    private values: string | undefined;\r\n    private result: boolean;\r\n\r\n    constructor(service: string, result: boolean, values?: any, id?: string) {\r\n        super();\r\n        this.op = 'service_response';\r\n        this.id = id;\r\n        this.service = service;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.values = values ?? {};\r\n        this.result = result;\r\n    }\r\n}\r\n\r\nclass Unsubscribe extends RosbridgeProtocol {\r\n    private id: string | undefined;\r\n    private topic: string;\r\n\r\n    constructor(topic: string, id?: string) {\r\n        super();\r\n        this.op = 'unsubscribe';\r\n        this.topic = topic;\r\n        this.id = id;\r\n    }\r\n}\r\n\r\ninterface RosTopicParam {\r\n    name: string;\r\n    messageType: string;\r\n    compression?: RosTopicCompression;\r\n    throttleRate?: number;\r\n    latch?: boolean;\r\n    queueSize?: number;\r\n    queueLength?: number;\r\n    reconnectOnClose?: boolean;\r\n    ros: Rosbridge;\r\n}\r\n\r\n/**\r\n * RosTopic class used to instantiate a topic, subscribe to its event and advertise future events regarding the topic\r\n */\r\nexport class RosTopic<T extends { toString: () => string }>\r\n    implements RosTopicParam\r\n{\r\n    name: string;\r\n    messageType: string;\r\n    compression?: RosTopicCompression;\r\n    throttleRate?: number;\r\n    latch?: boolean;\r\n    queueSize?: number;\r\n    queueLength?: number;\r\n    reconnectOnClose?: boolean;\r\n    ros: Rosbridge;\r\n    private observable$: Observable<T> | undefined;\r\n    private id: string | undefined;\r\n    private sub: Subscription | undefined;\r\n\r\n    constructor({\r\n        ros,\r\n        name,\r\n        messageType,\r\n        compression = 'none',\r\n        throttleRate = 0,\r\n        latch = false,\r\n        queueSize = 100,\r\n        queueLength = 0,\r\n        reconnectOnClose = true,\r\n    }: RosTopicParam) {\r\n        this.ros = ros;\r\n        this.name = name;\r\n        this.messageType = messageType;\r\n        this.compression = compression;\r\n        this.throttleRate = throttleRate;\r\n        this.latch = latch;\r\n        this.queueSize = queueSize;\r\n        this.queueLength = queueLength;\r\n        this.reconnectOnClose = reconnectOnClose;\r\n\r\n        this.throttleRate = Math.max(this.throttleRate, 0);\r\n    }\r\n\r\n    subscribe(callback: (message: T) => void) {\r\n        const subRequest = new Subscribe(this.name, this.messageType);\r\n        this.observable$ = this.ros.connection$?.pipe(\r\n            filter(\r\n                (data) => data?.topic === this.name && data?.op === 'publish' // eslint-disable-line @typescript-eslint/no-unsafe-member-access\r\n            ),\r\n            pluck('msg')\r\n        );\r\n        this.sub = this.observable$?.subscribe((message: T) =>\r\n            callback(message)\r\n        );\r\n        this.id = subRequest.id;\r\n        this.ros.sendRequest(subRequest);\r\n    }\r\n\r\n    unsubscribe() {\r\n        const unsubRequest = new Unsubscribe(this.name, this.id);\r\n        this.ros.sendRequest(unsubRequest);\r\n        this.sub?.unsubscribe();\r\n    }\r\n\r\n    advertise() {\r\n        const advertiseRequest = new Advertise(\r\n            this.name,\r\n            this.messageType,\r\n            this.id,\r\n            this.latch,\r\n            this.queueSize\r\n        );\r\n        this.id = advertiseRequest.id;\r\n        this.ros.sendRequest(advertiseRequest);\r\n    }\r\n\r\n    publish(msg: T) {\r\n        const publishRequest = new Publish(\r\n            this.name,\r\n            msg,\r\n            this.id,\r\n            this.latch,\r\n            this.queueSize\r\n        );\r\n        this.ros.sendRequest(publishRequest);\r\n    }\r\n\r\n    unadvertise() {\r\n        const unadvertiseRequest = new Unadvertise(this.name, this.id);\r\n        this.ros.sendRequest(unadvertiseRequest);\r\n    }\r\n}\r\n\r\ninterface RosServiceParams {\r\n    name: string;\r\n    serviceType: string;\r\n    ros: Rosbridge;\r\n}\r\n\r\ninterface RosParamParams {\r\n    name: string;\r\n    ros: Rosbridge;\r\n}\r\n\r\nexport class RosService<\r\n    T_REQ extends { toString: () => string },\r\n    T_RES extends { toString: () => string }\r\n> implements RosServiceParams\r\n{\r\n    name: string;\r\n    ros: Rosbridge;\r\n    serviceType: string;\r\n    private id: number | undefined;\r\n    private isAdvertised: boolean = false;\r\n\r\n    constructor({ ros, name, serviceType }: RosServiceParams) {\r\n        this.ros = ros;\r\n        this.name = name;\r\n        this.serviceType = serviceType;\r\n    }\r\n\r\n    advertise(callback: (req: T_REQ) => T_RES) {\r\n        const serviceAdvertiseRequest = new AdvertiseService(\r\n            this.serviceType,\r\n            this.name\r\n        );\r\n        this.ros.connection$\r\n            ?.pipe(\r\n                filter(\r\n                    (data) =>\r\n                        data?.service === this.name && // eslint-disable-line @typescript-eslint/no-unsafe-member-access\r\n                        data?.op === 'call_service' // eslint-disable-line @typescript-eslint/no-unsafe-member-access\r\n                ),\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                map(({ args, id }) => ({ args, id }))\r\n            )\r\n            .subscribe((req: { args: T_REQ; id?: string }) => {\r\n                const res = callback(req.args);\r\n                const serviceResponse = new ServiceResponse(\r\n                    this.name,\r\n                    true,\r\n                    res,\r\n                    req.id ?? ''\r\n                );\r\n                this.ros.sendRequest(serviceResponse);\r\n            });\r\n\r\n        this.ros.sendRequest(serviceAdvertiseRequest);\r\n        this.isAdvertised = true;\r\n    }\r\n\r\n    call(\r\n        req: T_REQ,\r\n        callback: (res: T_RES) => void,\r\n        failedCallback?: (res: any) => void\r\n    ) {\r\n        const serviceCallRequest = new ServiceCall(this.name, req);\r\n        this.ros.connection$\r\n            ?.pipe(\r\n                filter(\r\n                    (data) =>\r\n                        data?.service === this.name && // eslint-disable-line @typescript-eslint/no-unsafe-member-access\r\n                        data?.id === serviceCallRequest.id && // eslint-disable-line @typescript-eslint/no-unsafe-member-access\r\n                        data?.op === 'service_response' // eslint-disable-line @typescript-eslint/no-unsafe-member-access\r\n                ),\r\n                tap((msg) => {\r\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                    if (msg?.result !== undefined && msg?.result === false)\r\n                        if (failedCallback) {\r\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                            failedCallback(msg.values);\r\n                        }\r\n                }),\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                filter((data) => data?.result !== false),\r\n                pluck('values'),\r\n                take(1)\r\n            )\r\n            .subscribe((message: T_RES) => callback(message));\r\n        this.ros.sendRequest(serviceCallRequest);\r\n    }\r\n\r\n    unadvertise() {\r\n        if (!this.isAdvertised) return;\r\n        const serviceUnadvertiseRequest = new UnadvertiseService(this.name);\r\n        this.ros.sendRequest(serviceUnadvertiseRequest);\r\n    }\r\n}\r\n\r\nexport class RosParam<T extends { toString: () => string }>\r\n    implements RosParamParams\r\n{\r\n    name: string;\r\n    ros: Rosbridge;\r\n\r\n    constructor({ ros, name }: RosParamParams) {\r\n        this.ros = ros;\r\n        this.name = name;\r\n    }\r\n\r\n    get(callback: (res: T) => void) {\r\n        const paramService = new RosService<{ name: string }, { value: T }>({\r\n            ros: this.ros,\r\n            name: '/rosapi/get_param',\r\n            serviceType: 'rosapi/GetParam',\r\n        });\r\n        paramService.call({ name: this.name }, (res) => {\r\n            // @ts-ignore\r\n            callback(JSON.parse(res.value));\r\n        });\r\n    }\r\n\r\n    set(newValue: T, callback: () => void) {\r\n        const paramService = new RosService<\r\n            { name: string; value: string },\r\n            {}\r\n        >({\r\n            ros: this.ros,\r\n            name: '/rosapi/set_param',\r\n            serviceType: 'rosapi/SetParam',\r\n        });\r\n        paramService.call(\r\n            { name: this.name, value: JSON.stringify(newValue) },\r\n            () => {\r\n                callback();\r\n            }\r\n        );\r\n    }\r\n\r\n    delete(callback: () => void) {\r\n        const paramService = new RosService<{ name: string }, {}>({\r\n            ros: this.ros,\r\n            name: '/rosapi/delete_param',\r\n            serviceType: 'rosapi/DeleteParam',\r\n        });\r\n\r\n        paramService.call({ name: this.name }, () => {\r\n            callback();\r\n        });\r\n    }\r\n}\r\n\r\ntype StatusMessageLevel = 'info' | 'warning' | 'error' | 'none';\r\n\r\ntype RosbridgeOperation =\r\n    | 'fragment'\r\n    | 'png'\r\n    | 'set_level'\r\n    | 'status'\r\n    | 'auth'\r\n    | 'advertise'\r\n    | 'unadvertise'\r\n    | 'subscribe'\r\n    | 'unsubscribe'\r\n    | 'call_service'\r\n    | 'advertise_service'\r\n    | 'unadvertise_service'\r\n    | 'service_request'\r\n    | 'service_response'\r\n    | 'publish';\r\n\r\ntype RosLibTransportLibrary =\r\n    | 'websocket'\r\n    | 'socket.io'\r\n    | 'RTCPeerConnection'\r\n    | 'workerSocket';\r\n\r\ntype RosTopicCompression = 'png' | 'cbor' | 'cbor-raw' | 'none';\r\n","export interface NumberMessage {\n    data: number;\n}\n\nexport interface NumberArrayMessage {\n    data: number[];\n}\n\nexport interface BoolMessage {\n    data: boolean;\n}\n\nexport interface StringMessage {\n    data: string;\n}\n\nexport interface ImuMessage {\n    header: RosMsgHeader;\n    orientation?: QuaternionMessage | null;\n    orientation_covariance?: number[] | null;\n    angular_velocity?: Vector3Message | null;\n    angular_velocity_covariance?: number[] | null;\n    linear_acceleration?: Vector3Message | null;\n    linear_acceleration_covariance?: number[] | null;\n}\n\nexport interface PointStampedMessage {\n    header: RosMsgHeader;\n    point?: Vector3Message;\n}\n\nexport interface Vector3Message {\n    x?: number | null;\n    y?: number | null;\n    z?: number | null;\n}\n\nexport interface QuaternionMessage {\n    x?: number | null;\n    y?: number | null;\n    z?: number | null;\n    w?: number | null;\n}\n\nexport interface JoyMessage {\n    header: RosMsgHeader;\n    axes?: number[] | null;\n    buttons?: number[] | null;\n}\n\nexport interface RosoutMessage {\n    header: RosMsgHeader;\n    level?: RosoutLevel | null;\n    name?: string | null;\n    msg?: string | null;\n    file?: string | null;\n    func?: string | null;\n    line?: number | null;\n    topics?: string[] | null;\n}\n\nexport interface RosMsgHeader {\n    seq?: number | null;\n    stamp?: RosTime | null;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    frame_id?: string | null;\n}\n\nexport interface RosTime {\n    secs?: number | null;\n    nsecs?: number | null;\n}\n\nexport enum RosoutLevel {\n    DEBUG = 1,\n    INFO = 2,\n    WARN = 4,\n    ERROR = 8,\n    FATAL = 16,\n}\n","/*\n * Public API Surface of ngx-roslib\n */\n\nexport * from './lib/ngx-roslib.service';\nexport * from './lib/ros-message.model';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}