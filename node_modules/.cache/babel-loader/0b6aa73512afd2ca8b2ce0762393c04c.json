{"ast":null,"code":"var _jsxFileName = \"/home/robotuser10/Downloads/my-app/src/components/Rossrv.jsx\";\nimport React, { Component } from 'react';\nimport Config from \"../scripts/config\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Slider, { createSliderWithTooltip } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Rossrv extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ros: null,\n      speed: 1,\n      force: 5,\n      pose: 0\n    };\n\n    this.onSliderChange = value => {\n      this.log(value);\n      this.setState({\n        value\n      });\n    };\n\n    this.onAfterChange = value => {\n      console.log(value); //eslint-disable-line\n    };\n\n    this.onSpeedSliderChange = speed => {\n      this.log(speed);\n      this.setState({\n        speed\n      });\n    };\n\n    this.onPoseSliderChange = pose => {\n      this.log(pose);\n      this.setState({\n        pose\n      });\n    };\n\n    this.onForceSliderChange = force => {\n      this.log(force);\n      this.setState({\n        force\n      });\n    };\n  }\n\n  log(value) {\n    console.log(value); //eslint-disable-line\n  }\n\n  // create a pose subscriber\n  init_connection() {\n    console.log(\"Establish map connection\");\n\n    try {\n      this.state.ros = new window.ROSLIB.Ros();\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.RSOBRIDGE_PORT + \"\");\n      console.log(\"In map components\");\n    } catch (error) {\n      console.log(\"Connection problem in map components\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Slider, {\n      value: this.state.value,\n      onChange: this.onSliderChange,\n      onAfterChange: this.onAfterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nexport default Rossrv;","map":{"version":3,"sources":["/home/robotuser10/Downloads/my-app/src/components/Rossrv.jsx"],"names":["React","Component","Config","Row","Col","Container","Button","Slider","createSliderWithTooltip","Rossrv","constructor","props","state","ros","speed","force","pose","onSliderChange","value","log","setState","onAfterChange","console","onSpeedSliderChange","onPoseSliderChange","onForceSliderChange","init_connection","window","ROSLIB","Ros","connect","ROSBRIDGE_SERVER_IP","RSOBRIDGE_PORT","error","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,GAAR,EAAYC,GAAZ,EAAiBC,SAAjB,EAA4BC,MAA5B,QAAyC,iBAAzC;AACA,OAAOC,MAAP,IAAiBC,uBAAjB,QAAgD,WAAhD;AACA,OAAO,4BAAP;;;AAKA,MAAMC,MAAN,SAAqBR,SAArB,CAA+B;AAO7BS,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AADgB,SANlBC,KAMkB,GANV;AAACC,MAAAA,GAAG,EAAE,IAAN;AACAC,MAAAA,KAAK,EAAE,CADP;AAEAC,MAAAA,KAAK,EAAC,CAFN;AAGAC,MAAAA,IAAI,EAAC;AAHL,KAMU;;AAAA,SAQlBC,cARkB,GAQDC,KAAK,IAAI;AACxB,WAAKC,GAAL,CAASD,KAAT;AACA,WAAKE,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACD,KAXiB;;AAAA,SAYlBG,aAZkB,GAYFH,KAAK,IAAI;AACrBI,MAAAA,OAAO,CAACH,GAAR,CAAYD,KAAZ,EADqB,CACD;AACvB,KAdiB;;AAAA,SAkClBK,mBAlCkB,GAkCIT,KAAK,IAAI;AACzB,WAAKK,GAAL,CAASL,KAAT;AACA,WAAKM,QAAL,CAAc;AACZN,QAAAA;AADY,OAAd;AAGD,KAvCa;;AAAA,SAyClBU,kBAzCkB,GAyCGR,IAAI,IAAI;AACnB,WAAKG,GAAL,CAASH,IAAT;AACA,WAAKI,QAAL,CAAc;AACZJ,QAAAA;AADY,OAAd;AAGD,KA9CS;;AAAA,SAgDpBS,mBAhDoB,GAgDEV,KAAK,IAAI;AACrB,WAAKI,GAAL,CAASJ,KAAT;AACA,WAAKK,QAAL,CAAc;AACZL,QAAAA;AADY,OAAd;AAGD,KArDW;AAGf;;AACHI,EAAAA,GAAG,CAACD,KAAD,EAAQ;AACLI,IAAAA,OAAO,CAACH,GAAR,CAAYD,KAAZ,EADK,CACe;AACrB;;AASL;AACAQ,EAAAA,eAAe,GAAE;AACfJ,IAAAA,OAAO,CAACH,GAAR,CAAY,0BAAZ;;AAEE,QAAG;AACD,WAAKP,KAAL,CAAWC,GAAX,GAAiB,IAAIc,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB;AACA,WAAKjB,KAAL,CAAWC,GAAX,CAAeiB,OAAf,CACE,UAAQ5B,MAAM,CAAC6B,mBAAf,GAAmC,GAAnC,GAAuC7B,MAAM,CAAC8B,cAA9C,GAA6D,EAD/D;AAGAV,MAAAA,OAAO,CAACH,GAAR,CAAY,mBAAZ;AACD,KAND,CAMC,OAAMc,KAAN,EAAa;AACZX,MAAAA,OAAO,CAACH,GAAR,CAAY,sCAAZ;AACD;AACF;;AAEJe,EAAAA,iBAAiB,GAAE;AACd,SAAKR,eAAL;AACD;;AAsBLS,EAAAA,MAAM,GAAG;AAED,wBACC,QAAC,MAAD;AACD,MAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWM,KADjB;AAED,MAAA,QAAQ,EAAE,KAAKD,cAFd;AAGD,MAAA,aAAa,EAAE,KAAKI;AAHnB;AAAA;AAAA;AAAA;AAAA,YADD;AAMD;;AArEwB;;AAuE/B,eAAeZ,MAAf","sourcesContent":["import React, {Component} from 'react';\nimport Config from \"../scripts/config\";\nimport {Row,Col, Container, Button} from \"react-bootstrap\";\nimport Slider, { createSliderWithTooltip } from 'rc-slider';\nimport 'rc-slider/assets/index.css'\n\n\n\n\nclass Rossrv extends Component {\n  state = {ros: null,\n          speed: 1,\n          force:5,\n          pose:0\n              };\n\n  constructor(props){\n    super(props);\n\n    }\n  log(value) {\n        console.log(value); //eslint-disable-line\n      }\n\n  onSliderChange = value => {\n    this.log(value);\n    this.setState({ value });\n  };\n  onAfterChange = value => {\n      console.log(value); //eslint-disable-line\n  };\n  // create a pose subscriber\n  init_connection(){\n    console.log(\"Establish map connection\");\n\n      try{\n        this.state.ros = new window.ROSLIB.Ros();\n        this.state.ros.connect(\n          \"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.RSOBRIDGE_PORT+\"\"\n        );\n        console.log(\"In map components\");\n      }catch(error) {\n        console.log(\"Connection problem in map components\");\n      }\n    }\n\n componentDidMount(){\n      this.init_connection();\n    }\n\n  onSpeedSliderChange = speed => {\n        this.log(speed);\n        this.setState({\n          speed,\n        });\n      };\n\n  onPoseSliderChange = pose => {\n            this.log(pose);\n            this.setState({\n              pose,\n            });\n          };\n\nonForceSliderChange = force => {\n          this.log(force);\n          this.setState({\n            force,\n          });\n        };\nrender() {\n\n        return (\n         <Slider\n        value={this.state.value}\n        onChange={this.onSliderChange}\n        onAfterChange={this.onAfterChange}\n      />  );\n      }\n}\nexport default Rossrv;\n"]},"metadata":{},"sourceType":"module"}