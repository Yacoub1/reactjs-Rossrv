import { OnDestroy } from '@angular/core';
import { WebSocketSubject } from 'rxjs/webSocket';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class NgxRoslibService implements OnDestroy {
    connection$: WebSocketSubject<any> | undefined;
    onOpen: Observable<any> | undefined;
    onClose: Observable<CloseEvent> | undefined;
    onError: Observable<any> | undefined;
    isConnected: boolean;
    private ros;
    constructor();
    set statusLevel(level: StatusMessageLevel);
    connect(url: string, transportLibrary?: RosLibTransportLibrary, transportOptions?: RTCConfiguration): Rosbridge;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxRoslibService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgxRoslibService>;
}
export declare class Rosbridge {
    isConnected: boolean;
    transportLibrary: RosLibTransportLibrary;
    transportOptions: RTCConfiguration | undefined;
    connection$: WebSocketSubject<any> | undefined;
    private connectionOpened$;
    onOpen: Observable<Event>;
    private connectionClosed$;
    onClose: Observable<CloseEvent>;
    private connectionError$;
    onError: Observable<any> | undefined;
    constructor(url?: string, transportLibrary?: RosLibTransportLibrary, transportOptions?: RTCConfiguration);
    set statusLevel(level: StatusMessageLevel);
    connect(url: string, transportLibrary?: RosLibTransportLibrary, transportOptions?: RTCConfiguration): WebSocketSubject<any> | undefined;
    authenticate(mac: string, client: string, dest: string, rand: string, t: number, level: string, end: number): void;
    sendRequest(message: any): void;
    getTopics(callback: (topics: string[]) => void, failedCallback?: (error: any) => void): void;
    getNodes(callback: (nodes: string[]) => void, failedCallback?: (error: any) => void): void;
}
interface RosTopicParam {
    name: string;
    messageType: string;
    compression?: RosTopicCompression;
    throttleRate?: number;
    latch?: boolean;
    queueSize?: number;
    queueLength?: number;
    reconnectOnClose?: boolean;
    ros: Rosbridge;
}
/**
 * RosTopic class used to instantiate a topic, subscribe to its event and advertise future events regarding the topic
 */
export declare class RosTopic<T extends {
    toString: () => string;
}> implements RosTopicParam {
    name: string;
    messageType: string;
    compression?: RosTopicCompression;
    throttleRate?: number;
    latch?: boolean;
    queueSize?: number;
    queueLength?: number;
    reconnectOnClose?: boolean;
    ros: Rosbridge;
    private observable$;
    private id;
    private sub;
    constructor({ ros, name, messageType, compression, throttleRate, latch, queueSize, queueLength, reconnectOnClose, }: RosTopicParam);
    subscribe(callback: (message: T) => void): void;
    unsubscribe(): void;
    advertise(): void;
    publish(msg: T): void;
    unadvertise(): void;
}
interface RosServiceParams {
    name: string;
    serviceType: string;
    ros: Rosbridge;
}
interface RosParamParams {
    name: string;
    ros: Rosbridge;
}
export declare class RosService<T_REQ extends {
    toString: () => string;
}, T_RES extends {
    toString: () => string;
}> implements RosServiceParams {
    name: string;
    ros: Rosbridge;
    serviceType: string;
    private id;
    private isAdvertised;
    constructor({ ros, name, serviceType }: RosServiceParams);
    advertise(callback: (req: T_REQ) => T_RES): void;
    call(req: T_REQ, callback: (res: T_RES) => void, failedCallback?: (res: any) => void): void;
    unadvertise(): void;
}
export declare class RosParam<T extends {
    toString: () => string;
}> implements RosParamParams {
    name: string;
    ros: Rosbridge;
    constructor({ ros, name }: RosParamParams);
    get(callback: (res: T) => void): void;
    set(newValue: T, callback: () => void): void;
    delete(callback: () => void): void;
}
declare type StatusMessageLevel = 'info' | 'warning' | 'error' | 'none';
declare type RosLibTransportLibrary = 'websocket' | 'socket.io' | 'RTCPeerConnection' | 'workerSocket';
declare type RosTopicCompression = 'png' | 'cbor' | 'cbor-raw' | 'none';
export {};
